---
port: 7890
socks-port: 7891
redir-port: 7892
tproxy-port: 7893
mixed-port: 7893
allow-lan: true
bind-address: '*'
mode: script
log-level: info
ipv6: false
external-controller: 127.0.0.1:9090
external-ui: folder
secret: ""
interface-name: en0
routing-mark: 6666
hosts:
  '*.clash.dev': 127.0.0.1
  '.dev': 127.0.0.1
  'alpha.clash.dev': '::1'

profile:
  store-selected: true
  store-fake-ip: true
dns:
  enable: true
  listen: 0.0.0.0:53
  ipv6: false
  default-nameserver:
  - 114.114.114.114
  - 8.8.8.8
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter:
  - '*.lan'
  - localhost.ptlogin2.qq.com
  nameserver:
    - 114.114.114.114
    - 8.8.8.8
    - tls://dns.rubyfish.cn:853
    - https://1.1.1.1/dns-query
    - dhcp://en0
    - '8.8.8.8#en0'

  fallback:
    - tcp://1.1.1.1
    - 'tcp://1.1.1.1#en0'
  fallback-filter:
    geoip: true
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4
    domain:
      - '+.google.com'
      - '+.facebook.com'
      - '+.youtube.com'
  nameserver-policy:
    'www.baidu.com': '114.114.114.114'
    '+.internal.crop.com': '10.0.0.1'
proxies:
  # Shadowsocks
  # The supported ciphers (encryption methods):
  #   aes-128-gcm aes-192-gcm aes-256-gcm
  #   aes-128-cfb aes-192-cfb aes-256-cfb
  #   aes-128-ctr aes-192-ctr aes-256-ctr
  #   rc4-md5 chacha20-ietf xchacha20
  #   chacha20-ietf-poly1305 xchacha20-ietf-poly1305
  - name: "ss1"
    type: ss
    server: server
    port: 443
    cipher: chacha20-ietf-poly1305
    password: "password"
    # udp: true

  - name: "ss2"
    type: ss
    server: server
    port: 443
    cipher: chacha20-ietf-poly1305
    password: "password"
    plugin: obfs
    plugin-opts:
      mode: tls # or http
      # host: bing.com

  - name: "ss3"
    type: ss
    server: server
    port: 443
    cipher: chacha20-ietf-poly1305
    password: "password"
    plugin: v2ray-plugin
    plugin-opts:
      mode: websocket # no QUIC now
      # tls: true # wss
      # skip-cert-verify: true
      # host: bing.com
      # path: "/"
      # mux: true
      # headers:
      #   custom: value

  # vmess
  # cipher support auto/aes-128-gcm/chacha20-poly1305/none
  - name: "vmess"
    type: vmess
    server: server
    port: 443
    uuid: uuid
    alterId: 32
    cipher: auto
    # udp: true
    # tls: true
    # skip-cert-verify: true
    # servername: example.com # priority over wss host
    # network: ws
    # ws-opts:
    #   path: /path
    #   headers:
    #     Host: v2ray.com
    #   max-early-data: 2048
    #   early-data-header-name: Sec-WebSocket-Protocol

  - name: "vmess-h2"
    type: vmess
    server: server
    port: 443
    uuid: uuid
    alterId: 32
    cipher: auto
    network: h2
    tls: true
    h2-opts:
      host:
        - http.example.com
        - http-alt.example.com
      path: /
  
  - name: "vmess-http"
    type: vmess
    server: server
    port: 443
    uuid: uuid
    alterId: 32
    cipher: auto
    # udp: true
    # network: http
    # http-opts:
    #   # method: "GET"
    #   # path:
    #   #   - '/'
    #   #   - '/video'
    #   # headers:
    #   #   Connection:
    #   #     - keep-alive

  - name: vmess-grpc
    server: server
    port: 443
    type: vmess
    uuid: uuid
    alterId: 32
    cipher: auto
    network: grpc
    tls: true
    servername: example.com
    # skip-cert-verify: true
    grpc-opts:
      grpc-service-name: "example"

  # socks5
  - name: "socks"
    type: socks5
    server: server
    port: 443
    # username: username
    # password: password
    # tls: true
    # skip-cert-verify: true
    # udp: true

  # http
  - name: "http"
    type: http
    server: server
    port: 443
    # username: username
    # password: password
    # tls: true # https
    # skip-cert-verify: true
    # sni: custom.com

  # Snell
  # Beware that there's currently no UDP support yet
  - name: "snell"
    type: snell
    server: server
    port: 44046
    psk: yourpsk
    # version: 2
    # obfs-opts:
      # mode: http # or tls
      # host: bing.com

  # Trojan
  - name: "trojan"
    type: trojan
    server: server
    port: 443
    password: yourpsk
    # udp: true
    # sni: example.com # aka server name
    # alpn:
    #   - h2
    #   - http/1.1
    # skip-cert-verify: true

  - name: trojan-grpc
    server: server
    port: 443
    type: trojan
    password: "example"
    network: grpc
    sni: example.com
    # skip-cert-verify: true
    udp: true
    grpc-opts:
      grpc-service-name: "example"

  - name: trojan-ws
    server: server
    port: 443
    type: trojan
    password: "example"
    network: ws
    sni: example.com
    # skip-cert-verify: true
    udp: true
    # ws-opts:
      # path: /path
      # headers:
      #   Host: example.com

  # ShadowsocksR
  # The supported ciphers (encryption methods): all stream ciphers in ss
  # The supported obfses:
  #   plain http_simple http_post
  #   random_head tls1.2_ticket_auth tls1.2_ticket_fastauth
  # The supported supported protocols:
  #   origin auth_sha1_v4 auth_aes128_md5
  #   auth_aes128_sha1 auth_chain_a auth_chain_b  
  - name: "ssr"
    type: ssr
    server: server
    port: 443
    cipher: chacha20-ietf
    password: "password"
    obfs: tls1.2_ticket_auth
    protocol: auth_sha1_v4
    # obfs-param: domain.tld
    # protocol-param: "#"
    # udp: true

proxy-groups:
- name: "relay"
  type: relay
  proxies:
    - http
    - vmess
    - ss1
    - ss2
- name: "auto"
  type: url-test
  proxies:
    - ss1
    - ss2
    - vmess1
  tolerance: 150
  lazy: true
  url: 'http://www.gstatic.com/generate_204'
  interval: 300
- name: "fallback-auto"
  type: fallback
  proxies:
    - ss1
    - ss2
    - vmess1
  url: 'http://www.gstatic.com/generate_204'
  interval: 300

  # load-balance: The request of the same eTLD+1 will be dial to the same proxy.
- name: "load-balance"
  type: load-balance
  proxies:
    - ss1
    - ss2
    - vmess1
  url: 'http://www.gstatic.com/generate_204'
  interval: 300
  strategy: round-robin
- name: Proxy
  type: select
  disable-udp: true
  proxies:
    - ss1
    - ss2
    - vmess1
    - auto
- name: en1
  type: select
  interface-name: en1
  routing-mark: 6667
  proxies:
    - DIRECT 

- name: UseProvider
  type: select
  use:
    - provider1
  proxies:
    - Proxy
    - DIRECT

proxy-providers:
  provider1:
    type: http
    url: "url"
    interval: 3600
    path: ./provider1.yaml
    health-check:
      enable: true
      interval: 600
      lazy: true
      url: http://www.gstatic.com/generate_204
  test:
    type: file
    path: /test.yaml
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204

tunnels:
  # one line config
  #- tcp/udp,127.0.0.1:6553,114.114.114.114:53,proxy
  #- tcp,127.0.0.1:6666,rds.mysql.com:3306,vpn
  # full yaml config
  #- network: [tcp, udp]
  #  address: 127.0.0.1:7777
  #  target: target.com
  #  proxy: proxy

rules:
  - DOMAIN-SUFFIX,google.com,auto
  - DOMAIN-KEYWORD,google,auto
  - DOMAIN,google.com,auto
  - DOMAIN-SUFFIX,ad.com,REJECT
  - SRC-IP-CIDR,192.168.1.201/32,DIRECT
  - IP-CIDR,127.0.0.0/8,DIRECT
  - GEOIP,CN,DIRECT
  - DST-PORT,80,DIRECT
  - SRC-PORT,7777,DIRECT
  - RULE-SET,apple,REJECT
  - MATCH,auto

script:
  code: |
    def main(ctx, metadata):
        ruleset_action = {
            'Reject': 'AdBlock',
            'Special': 'DIRECT',
            'Anti IP': 'Anti IP',
            'Netflix': 'Netflix',
            'Disney Plus': 'Disney',
            'YouTube': 'YouTube',
            'Spotify': 'Spotify',
            'Bilibili': 'Asian TV',
            'IQ': 'Asian TV',
            'IQIYI': 'Asian TV',
            'Letv': 'Asian TV',
            'Netease Music': 'Asian TV',
            'Tencent Video': 'Asian TV',
            'Youku': 'Asian TV',
            'WeTV': 'Asian TV',
            'ABC': 'Global TV',
            'Abema TV': 'Global TV',
            'Amazon': 'Global TV',
            'Bahamut': 'Global TV',
            'BBC iPlayer': 'Global TV',
            'DAZN': 'Global TV',
            'Discovery Plus': 'Global TV',
            'encoreTVB': 'Global TV',
            'F1 TV': 'Global TV',
            'Fox Now': 'Global TV',
            'Fox+': 'Global TV',
            'HBO Go': 'Global TV',
            'HBO Max': 'Global TV',
            'Hulu Japan': 'Global TV',
            'Hulu': 'Global TV',
            'Japonx': 'Global TV',
            'JOOX': 'Global TV',
            'KKBOX': 'Global TV',
            'KKTV': 'Global TV',
            'Line TV': 'Global TV',
            'myTV SUPER': 'Global TV',
            'Niconico': 'Global TV',
            'Pandora': 'Global TV',
            'PBS': 'Global TV',
            'Pornhub': 'Global TV',
            'Soundcloud': 'Global TV',
            'ViuTV': 'Global TV',
            'Apple Music': 'Apple TV',
            'Apple News': 'Apple TV',
            'Apple TV': 'Apple TV',
            'Apple': 'Apple',
            'Telegram': 'Telegram',
            'Crypto': 'Crypto',
            'Discord': 'Discord',
            'Google FCM': 'Google FCM',
            'Microsoft': 'Microsoft',
            'OpenAI': 'OpenAI',
            'PayPal': 'PayPal',
            'Scholar': 'Scholar',
            'Speedtest': 'Speedtest',
            'Steam': 'Steam',
            'miHoYo': 'miHoYo',
            'PROXY': 'Proxy',
            'Domestic': 'Domestic',
            'Domestic IPs': 'Domestic',
            'LAN': 'DIRECT'
          }

        port = int(metadata['dst_port'])

        if metadata['network'] == 'UDP' and port == 443:
            ctx.log('[Script] matched QUIC traffic use reject')
            return 'REJECT'

        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 3389, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        if port not in port_list:
            ctx.log('[Script] not common port use direct')
            return 'DIRECT'

        if metadata['dst_ip'] == '':
            metadata['dst_ip'] = ctx.resolve_ip(metadata['host'])

        for ruleset in ruleset_action:
            if ctx.rule_providers[ruleset].match(metadata):
                return ruleset_action[ruleset]

        if metadata['dst_ip'] != '':
            code = ctx.geoip(metadata['dst_ip'])
            if code == 'CN':
                ctx.log('[Script] Geoip CN')
                return 'Domestic'

        ctx.log('[Script] FINAL')
        return 'Others'
rule-providers:
  Reject:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Reject.yaml
    path: "./Rules/Reject"
    interval: 86400
  Special:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Special.yaml
    path: "./Rules/Special"
    interval: 86400
  PROXY:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Proxy.yaml
    path: "./Rules/Proxy"
    interval: 86400
  Domestic:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Domestic.yaml
    path: "./Rules/Domestic"
    interval: 86400
  Domestic IPs:
    type: http
    behavior: ipcidr
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Domestic%20IPs.yaml
    path: "./Rules/Domestic_IPs"
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/LAN.yaml
    path: "./Rules/LAN"
    interval: 86400
  Anti IP:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/lwd-temp/anti-ip-attribution/main/generated/rule-provider.yaml
    path: "./Rules/Anti_IP"
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Netflix.yaml
    path: "./Rules/Media/Netflix"
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Spotify.yaml
    path: "./Rules/Media/Spotify"
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/YouTube.yaml
    path: "./Rules/Media/YouTube"
    interval: 86400
  Bilibili:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Bilibili.yaml
    path: "./Rules/Media/Bilibili"
    interval: 86400
  IQ:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/IQ.yaml
    path: "./Rules/Media/IQI"
    interval: 86400
  IQIYI:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/IQIYI.yaml
    path: "./Rules/Media/IQYI"
    interval: 86400
  Letv:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Letv.yaml
    path: "./Rules/Media/Letv"
    interval: 86400
  Netease Music:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Netease%20Music.yaml
    path: "./Rules/Media/Netease_Music"
    interval: 86400
  Tencent Video:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Tencent%20Video.yaml
    path: "./Rules/Media/Tencent_Video"
    interval: 86400
  Youku:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Youku.yaml
    path: "./Rules/Media/Youku"
    interval: 86400
  WeTV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/WeTV.yaml
    path: "./Rules/Media/WeTV"
    interval: 86400
  ABC:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/ABC.yaml
    path: "./Rules/Media/ABC"
    interval: 86400
  Abema TV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Abema%20TV.yaml
    path: "./Rules/Media/Abema_TV"
    interval: 86400
  Amazon:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Amazon.yaml
    path: "./Rules/Media/Amazon"
    interval: 86400
  Apple Music:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Apple%20Music.yaml
    path: "./Rules/Media/Apple_Music"
    interval: 86400
  Apple News:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Apple%20News.yaml
    path: "./Rules/Media/Apple_News"
    interval: 86400
  Apple TV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Apple%20TV.yaml
    path: "./Rules/Media/Apple_TV"
    interval: 86400
  Bahamut:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Bahamut.yaml
    path: "./Rules/Media/Bahamut"
    interval: 86400
  BBC iPlayer:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/BBC%20iPlayer.yaml
    path: "./Rules/Media/BBC_iPlayer"
    interval: 86400
  DAZN:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/DAZN.yaml
    path: "./Rules/Media/DAZN"
    interval: 86400
  Discovery Plus:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Discovery%20Plus.yaml
    path: "./Rules/Media/Discovery_Plus"
    interval: 86400
  Disney Plus:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Disney%20Plus.yaml
    path: "./Rules/Media/Disney_Plus"
    interval: 86400
  encoreTVB:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/encoreTVB.yaml
    path: "./Rules/Media/encoreTVB"
    interval: 86400
  F1 TV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/F1%20TV.yaml
    path: "./Rules/Media/F1_TV"
    interval: 86400
  Fox Now:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Fox%20Now.yaml
    path: "./Rules/Media/Fox_Now"
    interval: 86400
  Fox+:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Fox%2B.yaml
    path: "./Rules/Media/Fox+"
    interval: 86400
  HBO Go:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/HBO%20Go.yaml
    path: "./Rules/Media/HBO_Go"
    interval: 86400
  HBO Max:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/HBO%20Max.yaml
    path: "./Rules/Media/HBO_Max"
    interval: 86400
  Hulu Japan:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Hulu%20Japan.yaml
    path: "./Rules/Media/Hulu_Japan"
    interval: 86400
  Hulu:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Hulu.yaml
    path: "./Rules/Media/Hulu"
    interval: 86400
  Japonx:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Japonx.yaml
    path: "./Rules/Media/Japonx"
    interval: 86400
  JOOX:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/JOOX.yaml
    path: "./Rules/Media/JOOX"
    interval: 86400
  KKBOX:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/KKBOX.yaml
    path: "./Rules/Media/KKBOX"
    interval: 86400
  KKTV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/KKTV.yaml
    path: "./Rules/Media/KKTV"
    interval: 86400
  Line TV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Line%20TV.yaml
    path: "./Rules/Media/Line_TV"
    interval: 86400
  myTV SUPER:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/myTV%20SUPER.yaml
    path: "./Rules/Media/myTV_SUPER"
    interval: 86400
  Niconico:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Niconico.yaml
    path: "./Rules/Media/Niconico"
    interval: 86400
  Pandora:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Pandora.yaml
    path: "./Rules/Media/Pandora"
    interval: 86400
  PBS:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/PBS.yaml
    path: "./Rules/Media/PBS"
    interval: 86400
  Pornhub:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Pornhub.yaml
    path: "./Rules/Media/Pornhub"
    interval: 86400
  Soundcloud:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/Soundcloud.yaml
    path: "./Rules/Media/Soundcloud"
    interval: 86400
  ViuTV:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Media/ViuTV.yaml
    path: "./Rules/Media/ViuTV"
    interval: 86400
  Telegram:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Telegram.yaml
    path: "./Rules/Telegram"
    interval: 86400
  Crypto:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Crypto.yaml
    path: "./Rules/Crypto"
    interval: 86400
  Discord:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Discord.yaml
    path: "./Rules/Discord"
    interval: 86400
  Steam:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Steam.yaml
    path: "./Rules/Steam"
    interval: 86400
  Speedtest:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Speedtest.yaml
    path: "./Rules/Speedtest"
    interval: 86400
  PayPal:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/PayPal.yaml
    path: "./Rules/PayPal"
    interval: 86400
  Microsoft:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Microsoft.yaml
    path: "./Rules/Microsoft"
    interval: 86400
  OpenAI:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/OpenAI.yaml
    path: "./Rules/OpenAI"
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Apple.yaml
    path: "./Rules/Apple"
    interval: 86400
  Google FCM:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Google%20FCM.yaml
    path: "./Rules/Google FCM"
    interval: 86400
  Scholar:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Scholar.yaml
    path: "./Rules/Scholar"
    interval: 86400
  miHoYo:
    type: http
    behavior: classical
    url: https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/miHoYo.yaml
    path: "./Rules/miHoYo"
    interval: 86400
rules:
- RULE-SET, Reject, AdBlock
- RULE-SET, Special, DIRECT
- RULE-SET, Anti IP, Anti IP
- RULE-SET, Netflix, Netflix
- RULE-SET, Disney Plus, Disney
- RULE-SET, YouTube, YouTube
- RULE-SET, Spotify, Spotify
- RULE-SET, Bilibili, Asian TV
- RULE-SET, IQ, Asian TV
- RULE-SET, IQIYI, Asian TV
- RULE-SET, Letv, Asian TV
- RULE-SET, Netease Music, Asian TV
- RULE-SET, Tencent Video, Asian TV
- RULE-SET, Youku, Asian TV
- RULE-SET, WeTV, Asian TV
- RULE-SET, ABC, Global TV
- RULE-SET, Abema TV, Global TV
- RULE-SET, Amazon, Global TV
- RULE-SET, Bahamut, Global TV
- RULE-SET, BBC iPlayer, Global TV
- RULE-SET, DAZN, Global TV
- RULE-SET, Discovery Plus, Global TV
- RULE-SET, encoreTVB, Global TV
- RULE-SET, F1 TV, Global TV
- RULE-SET, Fox Now, Global TV
- RULE-SET, Fox+, Global TV
- RULE-SET, HBO Go, Global TV
- RULE-SET, HBO Max, Global TV
- RULE-SET, Hulu Japan, Global TV
- RULE-SET, Hulu, Global TV
- RULE-SET, Japonx, Global TV
- RULE-SET, JOOX, Global TV
- RULE-SET, KKBOX, Global TV
- RULE-SET, KKTV, Global TV
- RULE-SET, Line TV, Global TV
- RULE-SET, myTV SUPER, Global TV
- RULE-SET, Niconico, Global TV
- RULE-SET, Pandora, Global TV
- RULE-SET, PBS, Global TV
- RULE-SET, Pornhub, Global TV
- RULE-SET, Soundcloud, Global TV
- RULE-SET, ViuTV, Global TV
- RULE-SET, Apple Music, Apple TV
- RULE-SET, Apple News, Apple TV
- RULE-SET, Apple TV, Apple TV
- RULE-SET, Apple, Apple
- RULE-SET, Telegram, Telegram
- RULE-SET, Crypto, Crypto
- RULE-SET, Discord, Discord
- RULE-SET, Google FCM, Google FCM
- RULE-SET, Microsoft, Microsoft
- RULE-SET, OpenAI, OpenAI
- RULE-SET, PayPal, PayPal
- RULE-SET, Scholar, Scholar
- RULE-SET, Speedtest, Speedtest
- RULE-SET, Steam, Steam
- RULE-SET, miHoYo, miHoYo
- RULE-SET, PROXY, Proxy
- RULE-SET, Domestic, Domestic
- RULE-SET, Domestic IPs, Domestic
- RULE-SET, LAN, DIRECT
- GEOIP, CN, Domestic
- MATCH, Others